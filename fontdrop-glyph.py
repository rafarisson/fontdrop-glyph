# pip install fonttools

import os
import argparse
import re
from datetime import datetime
from fontTools import ttLib

def surrogate_to_str(input):
	if input < 0x10000 or input > 0x10FFFF:
		return "\\u{0:X}".format(input)
	code = input - 0x10000
	low = 0xD800 | (code >> 10)
	high = 0xDC00 | (code & 0x3FF)
	return "\\u{0:X}\\u{1:X}".format(low, high)

parser = argparse.ArgumentParser()
parser.add_argument('--font', action = 'store', dest = 'font', default = "materialdesignicons-webfont.ttf")
parser.add_argument('--out', action = 'store', dest = 'out', default = "materialdesignicons.js")
arguments = parser.parse_args()

tt = ttLib.TTFont(arguments.font)

# tt["cmap"].getBestCmap() -> { 983041: 'vector-square' }
# invert -> 'vector-square': 983041
map = {v: k for k, v in tt["cmap"].getBestCmap().items()}

# 'vector-square': 983041 -> 'vector-square': '\\uDB80\\uDC01'
for k in map:
	map[k] = surrogate_to_str(map[k])

content = str(map)
str_to_replace = { ", ": ",\n\t", "\\\\": "\\", "{": "var Icon = {\n\t", "}": "\n};\n", "'": "\"" }
for k, v in str_to_replace.items():
	content = content.replace(k, v)

with open(arguments.out, "w") as f:
	f.write("// This file is automatically generated from {0}\n".format(os.path.basename(__file__)))
	f.write("// Font: {0}\n".format(arguments.font))
	f.write("// Glyphs: {0}\n".format(len(map)))
	f.write("// Date time: {0}\n".format(datetime.now().strftime("%d/%m/%Y %H:%M:%S")))
	f.write("\n")
	f.write(content)
