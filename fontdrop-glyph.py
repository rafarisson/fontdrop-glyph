import os
import argparse
import re
from datetime import datetime
from fontTools import ttLib

def surrogate_to_str(input_code):
    """Converts a Unicode code point to a surrogate pair string if necessary."""
    if input_code < 0x10000 or input_code > 0x10FFFF:
        return f"\\u{input_code:X}"
    code = input_code - 0x10000
    low = 0xD800 | (code >> 10)
    high = 0xDC00 | (code & 0x3FF)
    return f"\\u{low:X}\\u{high:X}"

def camel_case(s):
    """Converts a string to CamelCase."""
    return ''.join(word.title() for word in re.split("[-_]", s))

def property_name(s):
    """Generate property name."""
    s = camel_case(s)
    return s[0].lower() + s[1:] + "Icon"

def format_content(content, pattern):
    """Replaces occurrences of patterns in the given content."""
    for old, new in pattern.items():
        content = content.replace(old, new)
    return content

def generate_js_file(file_name, font_name, glyph_map):
    """Generates a JavaScript file with icon mappings."""
    with open(file_name + ".js", "w") as f:
        f.write(f"// This file is automatically generated from {os.path.basename(__file__)}\n")
        f.write(f"// Font: {font_name}\n")
        f.write(f"// Glyphs: {len(glyph_map)}\n")
        f.write(f"// Date time: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
        formatted_content = format_content(
            str(glyph_map),
            {", ": ",\n\t", "\\\\": "\\", "{": "var Icon = {\n\t", "}": "\n};\n", "'": '"'}
        )
        f.write(formatted_content)

def generate_qml_file(file_name, font_name, glyph_map):
    """Generates a QML file with icon mappings."""
    with open(file_name + ".qml", "w") as f:
        f.write(f"// This file is automatically generated from {os.path.basename(__file__)}\n")
        f.write(f"// Font: {font_name}\n")
        f.write(f"// Glyphs: {len(glyph_map)}\n")
        f.write(f"// Date time: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
        f.write("pragma Singleton\n\nimport QtQuick\n\nQtObject {\n")
        f.write("\treadonly property FontLoader font: FontLoader {\n")
        f.write(f"\t\tsource: \"{font_name}\"\n")
        f.write("\t}\n")
        for name, code in glyph_map.items():
            f.write(f"\treadonly property string {property_name(name)}: \"{code}\"\n")
        f.write("}\n")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--font', help="Font file path")
    parser.add_argument('--format', choices=["qml", "js", "all"], default="qml", help="Output format")
    parser.add_argument('--out', help="Output file name")
    args = parser.parse_args()
    
    if args.font is None:
        exit()
    if args.out is None:
        args.out = os.path.splitext(args.font)[0]

    tt = ttLib.TTFont(args.font)
    cmap = tt["cmap"].getBestCmap()
    glyph_map = {name: surrogate_to_str(code) for code, name in cmap.items()}

    if args.format in ["js", "all"]:
        generate_js_file(args.out, args.font, glyph_map)
    if args.format in ["qml", "all"]:
        generate_qml_file(camel_case(args.out), args.font, glyph_map)

if __name__ == "__main__":
    main()
